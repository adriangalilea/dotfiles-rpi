#!/usr/bin/env zsh

# sys - System Resource Monitor
# Author: Adrian Galilea
# Created: July 20, 2024
# Last Modified: July 21, 2024
#
# Description:
# Minimal, colorful and informative display of system resource usage,
# including CPU, RAM, disk space, swap, and load averages.
# Now with warnings and process management for high CPU/RAM usage.
#
# Usage:
#   sys

# Enable debug mode if DEBUG is set to 1
if [[ "${DEBUG}" == "1" ]]; then
    set -x
fi

autoload -U colors && colors

color_percent() {
    local value=${1:-0}
    if (( value < 70 )); then
        echo "${fg[green]}${value}%${reset_color}"
    elif (( value < 85 )); then
        echo "${fg[yellow]}${value}%${reset_color}"
    else
        echo "${fg[red]}${value}%${reset_color}"
    fi
}

color_temp() {
    local temp=${1%\'C}
    if (( temp < 50 )); then
        echo "${fg[green]}${1}${reset_color}"
    elif (( temp < 70 )); then
        echo "${fg[yellow]}${1}${reset_color}"
    else
        echo "${fg[red]}${1}${reset_color}"
    fi
}

color_load() {
    local load=${1:-0}
    if (( $(echo "$load < 1" | bc -l) )); then
        echo "${fg[green]}${load}${reset_color}"
    elif (( $(echo "$load < 2" | bc -l) )); then
        echo "${fg[yellow]}${load}${reset_color}"
    else
        echo "${fg[red]}${load}${reset_color}"
    fi
}

bar_chart() {
    local percent=${1:-0}
    local filled=$((percent / 10))
    local result=""
    for ((i=0; i<10; i++)); do
        if (( i < filled )); then
            result+="‚ñà"
        else
            result+="‚ñë"
        fi
    done
    echo $result
}

show_top_offenders() {
    local resource=$1
    local count=5
    local command

    if [[ $resource == "cpu" ]]; then
        command="ps -eo pcpu,pid,user,args --sort=-pcpu | head -n $((count + 1))"
    else
        command="ps -eo pmem,pid,user,args --sort=-pmem | head -n $((count + 1))"
    fi

    echo "Top $resource consumers:"
    eval $command | awk 'NR>1 {printf "%5s%% %5s %-8s %s\n", $1, $2, $3, $4}' | 
        gum table --widths 8,8,12,42 --padding "0 1"
}

manage_process() {
    local resource=$1
    local pid=$(gum input --placeholder "Enter PID to kill")
    if [[ -n $pid ]]; then
        if gum confirm "Are you sure you want to kill process $pid?"; then
            kill $pid
            echo "Process $pid has been terminated."
        else
            echo "Process termination cancelled."
        fi
    fi
}

sys() {
    # CPU
    local cpu_percent=$(top -bn1 | awk '/^%Cpu/ {printf "%.0f", $2+$4}')
    cpu_percent=${cpu_percent:-0}

    # RAM
    local ram_info=$(command free -m | awk '/^Mem:/ {print $2,$3,$4}')
    local ram_total=$(echo $ram_info | cut -d' ' -f1)
    local ram_used=$(echo $ram_info | cut -d' ' -f2)
    local ram_free=$(echo $ram_info | cut -d' ' -f3)
    local ram_percent=0
    if (( ram_total > 0 )); then
        ram_percent=$((ram_used * 100 / ram_total))
    fi

    # Disk
    local disk_info=$(df -h / | awk 'NR==2 {print $2,$3,$5}')
    local disk_total=$(echo $disk_info | cut -d' ' -f1)
    local disk_used=$(echo $disk_info | cut -d' ' -f2)
    local disk_percent=$(echo $disk_info | cut -d' ' -f3 | sed 's/%//')
    disk_percent=${disk_percent:-0}

    # Swap
    local swap_info=$(LANG=en_US.UTF-8 command free -m | awk '/^Swap:/ {print $2,$3}')
    local swap_total=$(echo $swap_info | cut -d' ' -f1)
    local swap_used=$(echo $swap_info | cut -d' ' -f2)
    local swap_percent=0
    if (( swap_total > 0 )); then
        swap_percent=$((swap_used * 100 / swap_total))
    fi

    # Load
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | sed 's/,//g')
    local load_1=$(echo $load_avg | awk '{print $1}')
    local load_5=$(echo $load_avg | awk '{print $2}')
    local load_15=$(echo $load_avg | awk '{print $3}')

    # Temperature (if available)
    local temp=$(vcgencmd measure_temp 2>/dev/null | cut -d"=" -f2 | cut -d"'" -f1 || echo "N/A")

    gum style \
        --align left --width 60 \
        "‚öôÔ∏è  $(bar_chart $cpu_percent) $(color_percent $cpu_percent) CPU
$([[ $temp != "N/A" ]] && echo "üå°Ô∏è  $(bar_chart $temp) $(color_temp $temp\'C) CPU Temp")
üß†  $(bar_chart $ram_percent) $(color_percent $ram_percent) ($ram_used/$ram_total MB) RAM
üíæ  $(bar_chart $disk_percent) $(color_percent $disk_percent) ($disk_used/$disk_total) Disk
üîÑ  $(bar_chart $swap_percent) $(color_percent $swap_percent) ($swap_used/$swap_total MB) Swap
‚öñÔ∏è  $(color_load $load_1) $(color_load $load_5) $(color_load $load_15) Load (1m 5m 15m)"

    local warning_shown=false

    if (( cpu_percent >= 80 )); then
        echo "‚ö†Ô∏è  Warning: High CPU usage detected!"
        show_top_offenders "cpu"
        if gum confirm "Do you want to manage high CPU processes?"; then
            manage_process "cpu"
        fi
        warning_shown=true
    fi

    if (( ram_percent >= 80 )); then
        if $warning_shown; then
            sys
            return
        fi
        echo "‚ö†Ô∏è  Warning: High RAM usage detected!"
        show_top_offenders "ram"
        if gum confirm "Do you want to manage high RAM processes?"; then
            manage_process "ram"
        fi
    fi
}

# Run the main function only if the script is executed, not sourced
if [[ "$0" == "${(%):-%N}" ]]; then
    sys
fi

# Disable debug mode if it was enabled
if [[ "${DEBUG}" == "1" ]]; then
    set +x
fi
