#!/usr/bin/env bash

# --- history filtering ---
zshaddhistory() {
    emulate -L zsh
    [[ ${1%%$'\n'} != ${~HISTORY_IGNORE} ]]
}

# --- directories ---

# Create directory and cd into it
mc() {
  if [ $# -ne 1 ]; then
    echo "usage: mc <dir-name>"
    return 137
  fi
  local dir_name="$1"
  mkdir -p "$dir_name" && cd "$dir_name"
}

# Display or change the directory stack
d() {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -n 10
  fi
}
compdef _dirs d

# Change to the previous directory only on non mac systems
# if [[ "$(uname -s)" != "Darwin" ]]; then
#   -() {
#     cd -
#   }
# fi

# --- file listing ---

files() {
    if [[ ! -x "$(command -v eza)" ]]; then
        echo -e "\033[1;33mMagic Dashboard: \`eza\` not installed.\033[0m" && return 1
    fi
    echo
    
    eza --icons --color=always --git -d "$PWD"
    
    echo
    
    local eza_output
    local max_files_lines=${MAGIC_DASHBOARD_FILES_LINES:-6}
    local ignore_pattern=".DS_Store|Icon?|Thumbs.db|desktop.ini"
    eza_output=$(
        eza --width="$COLUMNS" --grid --color=always --icons \
            --ignore-glob="$ignore_pattern" \
            --sort=name --group-directories-first --no-quotes \
            --git --long --no-user --no-permissions --no-filesize --no-time
    )
    if [[ $(echo "$eza_output" | wc -l) -gt $max_files_lines ]]; then
        local shortened
        shortened="$(echo "$eza_output" | head -n"$max_files_lines")"
        printf "%s \033[1;36m…\033[0m\n" "$shortened"
    elif [[ -n "$eza_output" ]]; then
        echo "$eza_output"
    fi
    echo
}

# --- Ctrl+S zsh sourcing ---

source_zshrc() {
  source ~/.zshrc
}

# Disable terminal flow control (Ctrl+S/Ctrl+Q) to free up Ctrl+S
if [[ $- == *i* ]] && [[ -t 0 ]]; then
  stty -ixon 2>/dev/null || true
fi

zle -N source_zshrc
bindkey "^s" source_zshrc

# --- Ctrl+G lazygit ---

run_lazygit() {
  lazygit
}
zle -N run_lazygit
bindkey "^g" run_lazygit

# --- Ctrl+H helix ---

run_helix() {
  h
}
zle -N run_helix
bindkey "^h" run_helix


# --- Yazi ---

function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

zle -N yy
bindkey "^y" yy


# --- add to .gitignore ---

add_to_dotfiles() {
  local path="${1:-.}"
  local gitignore_path="$HOME/.gitignore"

  echo

  # Colors
  local GREEN='\033[0;32m'
  local RED='\033[0;31m'
  local YELLOW='\033[0;33m'
  local GRAY='\033[0;90m'
  local NC='\033[0m' # No Color

  # Help function
  if [[ "$path" == "-h" || "$path" == "--help" ]]; then
    echo -e "${GRAY}Usage:${NC} add [path]"
    echo
    echo "Add a file or directory to .gitignore"
    echo "If no path is provided, the current directory will be added"
    echo
    echo -e "${GRAY}⚠ This is only useful if you have ~ as a git repo.${NC}"
    return 0
  fi

  # Convert to relative path from home directory
  [[ "$path" = /* ]] && path="${path#$HOME/}" || path="${PWD#$HOME/}/${path#./}"
  path="${path#/}"
  path="${path%/.}"

  # Read .gitignore content
  local gitignore_content
  gitignore_content=$(<"$gitignore_path")

  # Check if the path is already in .gitignore
  if [[ $gitignore_content == *"!$path"* ]]; then
    echo -e "${YELLOW}⚠ Path $path is already in .gitignore${NC}"
    return 0
  fi

  local added=false

  # If it's a directory, add it and its contents
  if [[ -d "$HOME/$path" ]]; then
    echo "!$path/" >> "$gitignore_path"
    echo "!$path/**" >> "$gitignore_path"
    echo -e ".gitignore  <--  ${GREEN}+ !$path/${NC}"
    echo -e ".gitignore  <--  ${GREEN}+ !$path/**${NC}"
    added=true
  else
    # It's a file, add it directly
    echo "!$path" >> "$gitignore_path"
    echo -e ".gitignore  <--  ${GREEN}+ !$path${NC}"
    added=true
  fi

  # If it's a .config subdirectory, ensure the parent directory is also included
  if [[ "$path" == .config/* ]]; then
    local config_parent="${path%/*}"
    if [[ $gitignore_content != *"!$config_parent/"* ]]; then
      echo "!$config_parent/" >> "$gitignore_path"
      echo -e ".gitignore  <--  ${GREEN}+ !$config_parent/${NC}"
    fi
  fi

  if ! $added; then
    echo -e "${RED}✘ No changes were made to .gitignore${NC}"
  fi
}

alias add="add_to_dotfiles"

# --- toptal gitignore ---
# example usage `gi mac,go >> .gitignore`
function gi() { curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/$@ ;}

# alternatively this exists https://www.reddit.com/r/rust/comments/1657lyz/built_my_first_rust_app_cli_tool_to_generate/
# https://github.com/reemus-dev/gitnr
# but I find gi easier to use
