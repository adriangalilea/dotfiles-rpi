#!/usr/bin/env bash

# creates directory and cd's into it
mc () {
  if [ $# -ne 1 ]; then
    echo 'usage: mc <dir-name>'
    return 137
  fi
  # Create a new directory and enter it
  local dir_name="$1"
  mkdir -p "$dir_name" && cd "$dir_name"
}

# shows files
function files {
    if [[ ! -x "$(command -v eza)" ]]; then
        echo -e "\033[1;33mMagic Dashboard: \`eza\` not installed.\033[0m" && return 1
    fi

    echo
    
    # Display current directory with icon
    eza --icons --color=always --git -d "$PWD"
    
    echo
    
    local eza_output
    local max_files_lines=${MAGIC_DASHBOARD_FILES_LINES:-6}
    local ignore_pattern=".DS_Store|Icon?|Thumbs.db|desktop.ini"

    eza_output=$(
        eza --width="$COLUMNS" --grid --color=always --icons \
            --ignore-glob="$ignore_pattern" \
            --sort=name --group-directories-first --no-quotes \
            --git --long --no-user --no-permissions --no-filesize --no-time
    )

    if [[ $(echo "$eza_output" | wc -l) -gt $max_files_lines ]]; then
        local shortened
        shortened="$(echo "$eza_output" | head -n"$max_files_lines")"
        printf "%s \033[1;36m…\033[0m\n" "$shortened"
    elif [[ -n "$eza_output" ]]; then
        echo "$eza_output"
    fi
    echo
}

function d () {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -n 10
  fi
}
compdef _dirs d

# added as a function because it didn't work as an alias
function - () {
	cd -
}

sys() {
    autoload -U colors && colors

    color_percent() {
        if (( $1 < 70 )); then
            echo "%F{green}$1%%%f"
        elif (( $1 < 85 )); then
            echo "%F{yellow}$1%%%f"
        else
            echo "%F{red}$1%%%f"
        fi
    }

    color_temp() {
        temp=${1%\'C}
        if (( temp < 50 )); then
            echo "%F{green}$1%f"
        elif (( temp < 70 )); then
            echo "%F{yellow}$1%f"
        else
            echo "%F{red}$1%f"
        fi
    }

    color_load() {
        if (( $(echo "$1 < 1" | bc -l) )); then
            echo "%F{green}$1%f"
        elif (( $(echo "$1 < 2" | bc -l) )); then
            echo "%F{yellow}$1%f"
        else
            echo "%F{red}$1%f"
        fi
    }

    bar_chart() {
        local percent=$1
        local filled=$((percent / 10))
        local result=""
        for ((i=0; i<10; i++)); do
            if (( i < filled )); then
                result+="█"
            else
                result+="░"
            fi
        done
        echo $result
    }

    # CPU
    cpu_percent=$(top -bn1 | awk '/^%Cpu/ {printf "%.0f", $2+$4}')
    cpu_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2>/dev/null || echo "N/A")
    cpu_max_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq 2>/dev/null || echo "N/A")
    if [[ $cpu_freq != "N/A" && $cpu_max_freq != "N/A" ]]; then
        cpu_freq_ghz=$(echo "scale=1; $cpu_freq / 1000000" | bc)
        cpu_max_freq_ghz=$(echo "scale=1; $cpu_max_freq / 1000000" | bc)
        cpu_freq_display="($cpu_freq_ghz/$cpu_max_freq_ghz GHz)"
    else
        cpu_freq_display="(N/A)"
    fi

    # Temperature
    temp=$(vcgencmd measure_temp | cut -d"=" -f2 | cut -d"'" -f1)

    # RAM
    ram_total=$(free -m | awk '/^Mem:/ {print $2}')
    ram_used=$(free -m | awk '/^Mem:/ {print $3}')
    ram_percent=$((ram_used * 100 / ram_total))

    # Disk
    disk_total=$(df -h / | awk 'NR==2 {print $2}')
    disk_used=$(df -h / | awk 'NR==2 {print $3}')
    disk_percent=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')

    # Swap
    swap_total=$(free -m | awk '/^Swap:/ {print $2}')
    swap_used=$(free -m | awk '/^Swap:/ {print $3}')
    swap_percent=$((swap_used * 100 / swap_total))

    # Load
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | sed 's/,//g')
    load_1=$(echo $load_avg | awk '{print $1}')
    load_5=$(echo $load_avg | awk '{print $2}')
    load_15=$(echo $load_avg | awk '{print $3}')

    print -P "⚙️  $(bar_chart $cpu_percent) $(color_percent $cpu_percent) $cpu_freq_display CPU"
    print -P "🌡️  $(bar_chart $temp) $(color_temp $temp\'C) CPU Temp"
    print -P "🧠  $(bar_chart $ram_percent) $(color_percent $ram_percent) ($ram_used/$ram_total MB) RAM"
    print -P "💾  $(bar_chart $disk_percent) $(color_percent $disk_percent) ($disk_used/$disk_total) Disk"
    print -P "🔄  $(bar_chart $swap_percent) $(color_percent $swap_percent) ($swap_used/$swap_total MB) Swap"
    print -P "⚖️  $(color_load $load_1) $(color_load $load_5) $(color_load $load_15) Load (1m 5m 15m)"
}

 function dif() {
  debug() {
    [[ $DEBUG == 1 ]] && echo "DEBUG: $1" >&2
  }


  show_help() {
    echo "Usage: dif <file1> <file2>"
    echo "Compare two files or URLs, including GitHub repositories."
    echo
    echo "Supported formats:"
    echo "  - Local files"
    echo "  - GitHub shorthand: git:{repo}:{[optional, default=main/master]branch}:{filepath}"
    echo "    ex: git:adriangalilea/dotfiles-rpi:.shell/.aliases"
    echo "  - GitHub regular URLs: https://github.com/adriangalilea/dotfiles-rpi/blob/master/.shell/.aliases"
    echo "  - GitHub raw URLs: https://raw.githubusercontent.com/adriangalilea/dotfiles-rpi/master/.shell/.aliases"
    echo
    echo "Examples:"
    echo "  1. Compare local file to GitHub shorthand:"
    echo "     dif ~/.shell/.aliases git:adriangalilea/dotfiles-rpi:.shell/.aliases"
    echo
    echo "  2. Compare two GitHub repositories using shorthand:"
    echo "     dif git:adriangalilea/dotfiles-rpi:.shell/.aliases git:sobolevn/dotfiles:shell/.aliases"
    echo
    echo "  3. Compare GitHub shorthand to GitHub regular URL:"
    echo "     dif git:adriangalilea/dotfiles-rpi:.shell/.completions https://github.com/sobolevn/dotfiles/blob/master/shell/.completions"
    echo
    echo "  4. Compare local file to GitHub raw URL:"
    echo "     dif ~/.shell/.completions https://raw.githubusercontent.com/sobolevn/dotfiles/master/shell/.completions"
    echo
    echo "  5. Compare GitHub regular URL to GitHub raw URL:"
    echo "     dif https://github.com/adriangalilea/dotfiles-rpi/blob/master/.shell/.aliases https://raw.githubusercontent.com/sobolevn/dotfiles/master/shell/.aliases"
    echo
    echo "  6. Compare two local files:"
    echo "     dif ~/.shell/.aliases ~/.shell/.completions"
    echo
    echo "  7. Compare GitHub shorthand with specific branch to GitHub regular URL:"
    echo "     dif git:adriangalilea/dotfiles-rpi:main:.shell/.aliases https://github.com/sobolevn/dotfiles/blob/master/shell/.aliases"
  }

  fetch_github_file() {
    local input=$1
    debug "Parsing GitHub input: $input"

    local repo branch filepath

    if [[ $input =~ ^git: ]]; then
      # Handle git: shorthand
      repo=$(echo "$input" | cut -d':' -f2)
      local branch_and_path=$(echo "$input" | cut -d':' -f3-)
      
      if [[ "$branch_and_path" == *:* ]]; then
        branch=$(echo "$branch_and_path" | cut -d':' -f1)
        filepath=$(echo "$branch_and_path" | cut -d':' -f2-)
      else
        filepath=$branch_and_path
      fi
    elif [[ $input =~ ^https://github.com ]]; then
      # Handle GitHub URLs
      repo=$(echo "$input" | sed -E 's|https://github.com/([^/]+/[^/]+)/blob/.*|\1|')
      branch=$(echo "$input" | sed -E 's|.*/blob/([^/]+)/.*|\1|')
      filepath=$(echo "$input" | sed -E 's|.*/blob/[^/]+/(.*)|\1|')
    else
      echo "Error: Invalid GitHub input format." >&2
      return 1
    fi

    # If branch is not specified, try 'main' first, then 'master'
    if [[ -z $branch ]]; then
      if curl -sfL "https://raw.githubusercontent.com/${repo}/main/${filepath}" > /dev/null 2>&1; then
        branch="main"
      else
        branch="master"
      fi
    fi
    
    debug "Extracted - Repo: $repo, Branch: $branch, Filepath: $filepath"
    
    local github_raw_url="https://raw.githubusercontent.com/${repo}/${branch}/${filepath}"
    debug "Constructed URL: $github_raw_url"
    
    curl -sfL "$github_raw_url" || { echo "Error: Failed to fetch file from GitHub." >&2; return 1; }
  }

  get_content() {
    local file=$1
    if [[ -f $file ]]; then
      debug "Reading local file: $file"
      cat "$file"
    elif [[ $file =~ ^(git:|https://github.com) ]]; then
      fetch_github_file "$file"
    elif [[ $file =~ ^https?:// ]]; then
      debug "Fetching from URL: $file"
      curl -sfL "$file" || { echo "Error: Failed to fetch file from URL." >&2; return 1; }
    else
      echo "Error: File not found or invalid input: $file" >&2
      return 1
    fi
  }

  if [[ $1 == "-h" || $1 == "--help" ]]; then
    show_help
    return 0
  fi

  if [[ -z $1 || -z $2 ]]; then
    echo "Error: Two arguments are required." >&2
    show_help
    return 1
  fi

  local file1=$1
  local file2=$2

  debug "Processing file1: $file1"
  local content1=$(get_content "$file1")
  debug "Processing file2: $file2"
  local content2=$(get_content "$file2")

  if [[ -z $content1 || -z $content2 ]]; then
    return 1
  fi

  diff -u --label "${file1}" --label "${file2}" <(echo "$content1") <(echo "$content2") | delta
}
